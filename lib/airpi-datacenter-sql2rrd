#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2017 Niccolo Rigacci <niccolo@rigacci.org>
#
# Read sensors data from SQL database and append it to RRD archives.
# Each AirPi station will have a dedicated RRD file.
# Make required transformation from database UTC timestamps
# to RRD localtime POSIX timestamps.

import calendar, datetime, logging, os.path, psycopg2, pytz, subprocess, sys, time

# RRD filename template: will be filled with station_id.
RRD_NAME_TEMPLATE = '/var/lib/airpi/airpi-data-%s.rrd'
# Utility script calling rrdtool.
AIRPI_RRDTOOL_UPDATE= '/usr/local/lib/airpi/airpi-rrdtool-update'
# SQL database credentials.
dsn = "host=localhost dbname=airpi user=airpi password=vai9Iel3"
# Local timezone, used by RRD archives.
local_tz = pytz.timezone('CET')

# Set logging for main program.
logging.getLogger().setLevel(logging.WARNING)

#---------------------------------------------------------------
# Get the latest POSIX timestamp from an RRD archive.
# In case of errors return 0 (1970-01-01 00:00:00).
#---------------------------------------------------------------
def get_rrd_latest_timestamp(rrd_archive):
    if not os.path.isfile(rrd_archive):
        timestamp = 0
    else:
        cmd = ['rrdtool', 'lastupdate', rrd_archive]
        try:
            subproc = subprocess.Popen(cmd, stdin=None, stdout=subprocess.PIPE, stderr=None)
            output = subproc.communicate()[0]
            retcode = subproc.returncode
        except Exception, e:
            logging.warning("Exception executing rrdtool lastupdate: %s" % (str(e),))
            output = ''
            retcode = -1
        if retcode != 0 or output == '':
            logging.warning("Execution of rrdtool returned error code %d" % (retcode,))
            timestamp = 0
        else:
            last_line = output.splitlines()[-1]
            timestamp = int(last_line.split(':')[0])
    return timestamp

#---------------------------------------------------------------
# Terminate the main program in case of error.
#---------------------------------------------------------------
def store_values_to_rrd(station_id, group_data, group_ts):
    if len(group_data) <= 0: return
    # DB timtestamps are in UTC, convert to localtime Unix timestamp.
    timestamp = calendar.timegm(group_ts.timetuple())
    #print "Database datetime (UTC):", group_ts
    #print "Timestamp in localtime: ", timestamp
    #print group_data
    template = ":".join(group_data.keys())
    values   = ":".join(map(str, group_data.values()))
    cmd = [AIRPI_RRDTOOL_UPDATE, str(station_id), template, values, str(timestamp)]
    #print cmd
    try:
        retcode = subprocess.call(cmd)
    except Exception, e:
        logging.error("Exception executing airpi-rrdtool-update: %s" % (str(e),))
        sys.exit(1)
    if retcode != 0:
        logging.error("airpi-rrdtool-update returned error code %d" % (retcode,))
        sys.exit(1)

#---------------------------------------------------------------
# Main.
#---------------------------------------------------------------

# Connect with the database.
conn = psycopg2.connect(dsn)
curs = conn.cursor()

# Iterate on all the stations.
sql = u'SELECT id, name FROM stations'
curs.execute(sql)
for row in curs:

    station_id = row[0]
    station_name = row[1]
    rrd_archive = RRD_NAME_TEMPLATE % (station_id,)
    timestamp = get_rrd_latest_timestamp(rrd_archive)

    # RRD archive uses timezone-aware timestamps.
    datetime_local = datetime.datetime.fromtimestamp(timestamp, tz=local_tz)
    # SQL database uses UTC timestamps, (but without timezone info).
    datetime_utc = datetime_local.astimezone(pytz.utc)
    # Use naive datetime in query! If you use a timezone-aware query
    # parameter, database field will be considered localtime (wrong!).
    datetime_naive = datetime_utc.replace(tzinfo=None)

    logging.info("Station #%d \"%s\", RRD latest timestamp (UTC): %s" % (station_id, station_name, datetime_naive))

    curs2 = conn.cursor()
    sql2  = 'SELECT time_stamp, type, value FROM data'
    sql2 += ' WHERE time_stamp > %s AND station_id = %s ORDER BY time_stamp'
    #print "%s (%s, %s)" % (sql2, datetime_naive, station_id)
    curs2.execute(sql2, (datetime_naive, station_id))
    logging.info("Found %d more recent values in SQL database" % (curs2.rowcount))
    # Group all the data with the same timestamp.
    group_ts = None
    group_data = {}
    for data in curs2:
        data_ts = data[0]
        data_type = data[1]
        data_value = data[2]
        if data_ts != group_ts:
            store_values_to_rrd(station_id, group_data, group_ts)
            group_data = {}
            group_ts = data_ts
        group_data[data_type] = data_value
    store_values_to_rrd(station_id, group_data, group_ts)

sys.exit(0)
