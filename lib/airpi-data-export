#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2018 Niccolo Rigacci <niccolo@rigacci.org>
#
# Export data from an AirPi station database (SQLite or PostgreSQL)
# into CSV format. The period to be exported is expressed in localtime
# whereas timestamps in CSV file are in UTC time.
#
# Timestamps in database are in UTC time without timezone.
#
# SQLite database does not contain station_id field, PostgreSQL does.

import ConfigParser, datetime, os.path, sys

CFG_FILE = '/etc/airpi/airpi.cfg'
BME280_DATA = ['t', 'p', 'hum']
PMS5003_DATA = ['pm1.0', 'pm2.5', 'pm10', 'cf1pm1.0', 'cf1pm2.5', 'cf1pm10', 'gt0.3um', 'gt0.5um', 'gt1.0um', 'gt2.5um', 'gt5um', 'gt10um']
VALID_DATA = BME280_DATA + PMS5003_DATA
NAME = os.path.basename(sys.argv[0])

#---------------------------------------------------------------
# Usel the SQLite database engine to convert a datetime
# (in localtime) into an UTC datetime string.
#---------------------------------------------------------------
def localdate2utc(cursor, date):
    sql = "SELECT strftime('%Y-%m-%dT%H:%M:%SZ', ?, 'UTC')"
    str_date = date.strftime('%Y-%m-%dT00:00:00')
    curs.execute(sql, (str_date,))
    return curs.fetchone()[0]

#---------------------------------------------------------------
# Read configuration file.
#---------------------------------------------------------------
try:
    DEFAULTS = {
        'SQLITE_DB': '/var/lib/airpi/airpi-data.db',
        'PG_CONNECT': ''
    }
    config = ConfigParser.RawConfigParser(DEFAULTS)
    config.read(CFG_FILE)
    SQLITE_DB  = config.get('sqlite', 'SQLITE_DB')
    PG_CONNECT = config.get('pgsql', 'PG_CONNECT')
except Exception, e:
    print "ERROR: %s: Reading configuration file: %s" % (NAME, str(e),)
    sys.exit(1)

#---------------------------------------------------------------
# Main.
#---------------------------------------------------------------
if len(sys.argv) < 4:
    print("Usage: %s STATION_ID YYYY-MM-DD YYYY-MM-DD [field1,field2,...]\n" % (NAME))
    print("  Export a period of data from the AirPi database into CSV format.")
    print("  Period is from first date included to second date excluded (localtime).")
    print("  Timestamps in CSV file are in UTC time.")
    sys.exit(1)


try:
    station_id = int(sys.argv[1])
    date_begin = datetime.datetime.strptime(sys.argv[2], "%Y-%m-%d")
    date_end   = datetime.datetime.strptime(sys.argv[3], "%Y-%m-%d")
    if len(sys.argv) < 5:
        fields = None
    else:
        fields = sys.argv[4].split(',')
except Exception, e:
    print "ERROR: %s: Syntax error in command line: %s" % (NAME, str(e),)
    sys.exit(1)

#---------------------------------------------------------------
# Check requested fields.
#---------------------------------------------------------------
if fields:
    for f in list(fields):
        if not f in VALID_DATA:
            print 'WARNING: %s: Field "%s" does not exists' % (NAME, f)
            fields.remove(f)

#---------------------------------------------------------------
# Exec the SQL query ad output data.
#---------------------------------------------------------------
if PG_CONNECT != '':
    import psycopg2
    # To change PostgreSQL idea of localtime use something like:
    # SET TIME ZONE 'America/Los_Angeles';
    sql  = "SELECT time_stamp, type, value FROM data"
    sql += " WHERE (time_stamp AT TIME ZONE 'UTC') >= %s::TIMESTAMP"
    sql += " AND (time_stamp AT TIME ZONE 'UTC') < %s::TIMESTAMP AND station_id = %s"
    if fields: sql += " AND type IN ('%s')" % ("', '".join(fields))
    sql += " ORDER BY time_stamp, type"
    try:
        conn = psycopg2.connect(PG_CONNECT)
        curs = conn.cursor()
        curs.execute(sql, (date_begin, date_end, station_id))
    except Exception, e:
        print "ERROR: %s: Cannot connect database: %s" % (NAME, str(e),)
        sys.exit(1)
    for row in curs:
        print "%s,%s,%s" % (row[0].strftime("%Y-%m-%d %H:%M:%S"), row[1], row[2])
    curs.close()
    conn.close()
else:
    import sqlite3
    sql  = "SELECT timestamp, type, value FROM data"
    sql += " WHERE timestamp >= ?"
    sql += " AND timestamp < ?"
    if fields: sql += " AND type IN ('%s')" % ("', '".join(fields))
    sql += " ORDER BY timestamp, type"
    try:
        conn = sqlite3.connect(SQLITE_DB)
        curs = conn.cursor()
    except Exception, e:
        print "ERROR: %s: Cannot open database: %s" % (NAME, str(e),)
        sys.exit(1)
    try:
        timestamp_begin = localdate2utc(curs, date_begin)
        timestamp_end = localdate2utc(curs, date_end)
        for row in curs.execute(sql, (timestamp_begin, timestamp_end)):
            timestamp = datetime.datetime.strptime(row[0], '%Y-%m-%dT%H:%M:%SZ')
            print "%s,%s,%s" % (timestamp.strftime("%Y-%m-%d %H:%M:%S"), row[1], row[2])
    except Exception, e:
        print "ERROR: %s: Error reading the database: %s" % (NAME, str(e),)
        sys.exit(1)
    conn.close()

sys.exit(0)
