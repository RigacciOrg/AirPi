#!/usr/bin/python
# -*- coding: utf-8 -*-

import datetime, os, os.path, re, subprocess, sys, time

def usage():
    print u'Usage: %s archive.rrd "YYYY-mm-dd HH:MM"' % (os.path.basename(sys.argv[0]))
    print u"Delete data from RRD archive older than specified localtime."
    sys.exit(1)

if len(sys.argv) < 3: usage()

rrd_archive = sys.argv[1]
if not os.path.isfile(rrd_archive):
    print u'ERROR: Missing archive "%s"' % (rrd_archive,)
    sys.exit(1)
if not rrd_archive.endswith('.rrd'):
    print u'ERROR: Archive "%s": name must end with ".rrd"' % (rrd_archive,)
    sys.exit(1)

rrd_xmldump = rrd_archive[:-4] + '.xml'
rrd_purged  = rrd_archive[:-4] + '-purged.xml'

# Example:
# rrd_archive = /var/lib/airpi/airpi-data.rrd
# rrd_xmldump = /var/lib/airpi/airpi-data.xml
# rrd_purged  =/var/lib/airpi/airpi-data-purged.xml

try:
    # Convert timestamp string => datetime => POSIX timestamp.
    #reference = '2017-01-12 18:50'
    reference = sys.argv[2]
    reference_dt = datetime.datetime.strptime(reference, '%Y-%m-%d %H:%M')
    reference_ts = time.mktime(reference_dt.timetuple())
except:
    print u"ERROR: Cannot parse datetime string"
    usage()

#========================================================================
# Dump the entire RRD archive, zeroes old data and restore it.
#========================================================================
print u"Deleting old rows from RRD database..."
cmd = ['rrdtool', 'dump', rrd_archive, rrd_xmldump]
#print cmd
if (subprocess.call(cmd) != 0):
    sys.exit(1)
if not os.path.isfile(rrd_xmldump):
    print u'ERROR: Archive "%s" was not created. Permissions problem?' % (rrd_xmldump,)
    sys.exit(1)
# <!-- 2016-12-08 21:00:00 CET / 1481227200 --> <row>...
row_regex = re.compile('^\s+<!-- (.*) / (\d+) --> <row>')
with open(rrd_xmldump, 'r') as f_in:
    with open(rrd_purged, 'w') as f_out:
        for line in f_in:
            match = row_regex.match(line)
            if match:
                timestamp_str = match.group(1)
                timestamp_dt  = datetime.datetime.fromtimestamp(long(match.group(2)))
                if timestamp_dt < reference_dt:
                    v_count = line.count('<v>')
                    line = match.group(0) + ('<v>NaN</v>' * v_count) + '</row>\n'
            f_out.write(line)
cmd = ['rrdtool', 'restore', rrd_purged, rrd_archive, '--force-overwrite']
#print cmd
if (subprocess.call(cmd) != 0):
    sys.exit(1)
os.remove(rrd_xmldump)
os.remove(rrd_purged)

print u"Done!"
