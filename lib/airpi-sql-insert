#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2016-2017 Niccolo Rigacci <niccolo@rigacci.org>
#
# Store sensors data from an AirPi station into an SQLite database.
# If the database does not exist, it will be created.
# Data sources names are hard-coded into this source.
#
# Data is passed on the command line like that:
#
#   airpi-sql-insert t=19.60,hum=66.5,p=990,...

import datetime, logging, logging.handlers, os.path, sqlite3, sys

SQLITE_DB = '/var/lib/airpi/airpi-data.db'
BME280_DATA = ['t', 'p', 'hum']
PMS5003_DATA = ['pm1.0', 'pm2.5', 'pm10', 'cf1pm1.0', 'cf1pm2.5', 'cf1pm10', 'gt0.3um', 'gt0.5um', 'gt1.0um', 'gt2.5um', 'gt5um', 'gt10um']
VALID_DATA = BME280_DATA + PMS5003_DATA
NAME = os.path.basename(sys.argv[0])

#---------------------------------------------------------------
# Create the SQLite database.
#---------------------------------------------------------------
def sqlcreate(filename):
    try:
        con = sqlite3.connect(filename)
        cur = con.cursor()
        con.execute('''CREATE TABLE IF NOT EXISTS data(
            id        INTEGER PRIMARY KEY,
            timestamp TEXT,
            type      TEXT,
            value     REAL)''')
        con.execute('CREATE INDEX data_timestamp_idx ON data (timestamp)')
        con.execute('CREATE INDEX data_type_idx ON data (type)')
        con.execute('CREATE UNIQUE INDEX data_timestamp_type_key ON data (timestamp, type)')
        con.commit()
        con.close()
    except Exception, e:
        logging.error(u'%s: Failed to create the SQLite database: %s' % (NAME, str(e)))
        sys.exit(1)

#---------------------------------------------------------------
# Main.
#---------------------------------------------------------------
if len(sys.argv) < 3:
    print "Usage:   %s TIMESTAMP type1=value1,type2=value2,..." % (NAME)
    print "Example: %s 1486678139 t=19.60,hum=66.5,p=990,pm10=54.43,pm2.5=43.78" % (NAME)
    sys.exit(1)

timestamp = sys.argv[1]
data = sys.argv[2].split(',')

handler = logging.handlers.SysLogHandler(address='/dev/log')
logging.getLogger().addHandler(handler)
logging.getLogger().setLevel(logging.INFO)

if not os.path.isfile(SQLITE_DB):
    sqlcreate(SQLITE_DB)

try:
    con = sqlite3.connect(SQLITE_DB)
    cur = con.cursor()
except Exception, e:
    logging.error(u'%s: Cannot open database: %s' % (NAME, str(e),))
    sys.exit(1)

for d in data:
    try:
        key, val = d.split('=')
        if key.lower() in VALID_DATA:
            val = float(val)
            sql = "INSERT INTO data (timestamp, type, value) VALUES ('%s', '%s', %s)" % (timestamp, key.lower(), val)
            #print sql
            con.execute(sql)
        else:
            logging.warning(u'%s: Data "%s" does not contain a valid field' % (NAME, d))
    except Exception, e:
        logging.warning(u'%s: Data "%s" caused exception "%s"' % (NAME, d, str(e)))
        continue

try:
    con.commit()
    con.close()
except Exception, e:
    logging.error(u'%s: Committing data to database: "%s"' % (NAME, str(e)))
    sys.exit(1)
