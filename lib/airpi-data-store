#!/usr/bin/python
# -*- coding: utf-8 -*-

#----------------------------------------------------------------
# Copyright (C) 2016 Niccolo Rigacci
#
# Save AirPi sensors data to permanent storage.
#
# Read the following sensors:
#   * PMS5003 Particulate Matter
#   * BME280 Barometric, Temperature, Humidity
# Write to the following storages (via external scripts):
#   * SQLite database
#   * RRD archive
#----------------------------------------------------------------

import datetime, os.path, subprocess, sys

# Status file containing the data acquired by PMS5003,
# it contains: timestamp data1 data2 data3 ...
PMS5003_STATUS = '/var/run/pms5003.status'
# MAX_AGE (seconds) of timestamp: print an error if data is older than this.
# It should be greather than the acquiring interval, but less than twice such interval.
MAX_AGE = 18 * 60

# Data read from status file is in this order.
PMS5003_DATA = ['cf1pm1.0', 'cf1pm2.5', 'cf1pm10', 'pm1.0', 'pm2.5', 'pm10', 'gt0.3um', 'gt0.5um', 'gt1.0um', 'gt2.5um', 'gt5um', 'gt10um']
# Data read from BME280 sensor.
BME280_DATA = ['t', 'p', 'hum']

NAME = os.path.basename(sys.argv[0])

#----------------------------------------------------------------
# Fill this dictionary with sensor data.
#----------------------------------------------------------------
values = {}

#----------------------------------------------------------------
# Get PMS5003 sensor data (read status file).
#----------------------------------------------------------------
try:
    fp = open(PMS5003_STATUS, "r")
    data = fp.readline().strip().split(" ")
    fp.close()
except:
    print "ERROR: %s: Reading PMS5003 status file: %s" % (NAME, sys.exc_info()[0])

try:
    i = 0
    timestamp = datetime.datetime.strptime(data[i], "%Y-%m-%dT%H:%M:%SZ")
    data_age = (datetime.datetime.utcnow() - timestamp).seconds
    if data_age > MAX_AGE:
        print "WARNING: %s: PMS5003 status file contains old data" % (NAME,)
    else:
        for key in PMS5003_DATA:
            i += 1
            values[key] = "%0.3f" % (float(data[i]))
except:
    print "ERROR: %s: Parsing PMS5003 status file: %s" % (NAME, sys.exc_info()[0])


#----------------------------------------------------------------
# Get BME280 sensor data (exec program and read output).
#----------------------------------------------------------------
try:
    cmd = ['/usr/local/bin/bme280-snmp']
    subproc = subprocess.Popen(cmd, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, stderr = subproc.communicate()
    retcode = subproc.returncode
except:
    print "ERROR: %s: Failed to exec BME280 read program: %s" % (NAME, sys.exc_info()[0])
    retcode = -1

if retcode == 0:
    for line in output.splitlines():
        if line.startswith('Temperature'):
            values['t'] = "%0.2f" % (float(line.split(':')[1]))
        elif line.startswith('Pressure'):
            values['p'] = "%0.2f" % (float(line.split(':')[1]))
        elif line.startswith('Humidity'):
            values['hum'] = "%0.2f" % (float(line.split(':')[1]))
else:
    print "ERROR: %s: Cannot read values from BME280" % (NAME,)

#----------------------------------------------------------------
# Store data values into the RRD archive.
#----------------------------------------------------------------
# Template which specifies what data sources and in what order.
template = ':'.join(BME280_DATA + PMS5003_DATA).replace('.', '_')
data = []
for key in (BME280_DATA + PMS5003_DATA):
    if key in values.keys():
        data.append(values[key])
    else:
        data.append('U')
cmd = ["/usr/local/bin/airpi-data-store-rrd", template, ':'.join(data)]
#print cmd
retcode = subprocess.call(cmd)
if retcode != 0:
    print "ERROR: %s: Storing sensors data into RRD archive failed" % (NAME,)

#----------------------------------------------------------------
# Store data values into the SQLite database.
#----------------------------------------------------------------
if len(values) > 0:
    data = []
    for key, val in values.iteritems():
        data.append("%s=%s" % (key, val))
    cmd = ['/usr/local/bin/airpi-data-store-sql', ','.join(data)]
    #print cmd
    retcode = subprocess.call(cmd)
    if retcode != 0:
        print "ERROR: %s: Storing sensors data into SQL database failed" % (NAME,)
